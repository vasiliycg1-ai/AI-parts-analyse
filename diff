ë‡†¢≠•≠®• ‰†©´Æ¢ qw1-app.py ® APP.PY
***** qw1-app.py
# ================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ ==================

@app.route('/sales_statistics')
***** APP.PY
# ================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ ==================
@app.route('/sales_statistics')
*****

***** qw1-app.py
def api_sales_statistics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    data_type = request.args.get('data_type', 'all')
    volume_group = request.args.get('volume_group', 'all')  # ‚Üê –î–û–ë–ê–í–ò–õ–ò
    search = request.args.get('search', '')
    conn = get_db_connection()
    
    query = '''
***** APP.PY
def api_sales_statistics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    data_type = request.args.get('data_type', 'all')
    volume_group = request.args.get('volume_group', 'all')
    search = request.args.get('search', '') # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –±—Ä–µ–Ω–¥—É
    conn = get_db_connection()
    # –ò–ó–ú–ï–ù–ï–ù–û: JOIN —Å parts_catalog –∏ brands —á–µ—Ä–µ–∑ part_id
    query = '''
*****

***** qw1-app.py
        ss.*,
        b.name as brand_name,
        CASE 
***** APP.PY
        ss.*,
        pc.main_article, -- <-- –ë–µ—Ä–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ parts_catalog
        b.name as brand_name, -- <-- –ë–µ—Ä–µ–º –±—Ä–µ–Ω–¥ –∏–∑ brands —á–µ—Ä–µ–∑ parts_catalog
        CASE 
*****

***** qw1-app.py
    FROM sales_statistics ss
    JOIN brands b ON ss.brand_id = b.id
    WHERE 1=1
***** APP.PY
    FROM sales_statistics ss
    JOIN parts_catalog pc ON ss.part_id = pc.id -- <-- JOIN —á–µ—Ä–µ–∑ part_id
    JOIN brands b ON pc.brand_id = b.id -- <-- JOIN —á–µ—Ä–µ–∑ brand_id –≤ parts_catalog
    WHERE 1=1
*****

***** qw1-app.py
    '''
    
    params = []
    
    if data_type != 'all':
***** APP.PY
    '''
    params = []
    if data_type != 'all':
*****

***** qw1-app.py
        params.append(data_type)
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–õ–¨–¢–† –ü–û –ì–†–£–ü–ü–ï –û–ë–™–ï–ú–ê
    if volume_group != 'all':
***** APP.PY
        params.append(data_type)
    if volume_group != 'all':
*****

***** qw1-app.py
        params.append(volume_group)
    
    if search:
        query += ' AND (ss.main_article LIKE ? OR b.name LIKE ?)'
        search_term = f'%{search}%'
***** APP.PY
        params.append(volume_group)
    if search:
        # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–∏—Å–∫ —Ç–µ–ø–µ—Ä—å –ø–æ pc.main_article –∏ b.name
        query += ' AND (pc.main_article LIKE ? OR b.name LIKE ?)'
        search_term = f'%{search}%'
*****

***** qw1-app.py
        params.extend([search_term, search_term])
    
    query += ' ORDER BY ss.period DESC, b.name, ss.main_article'
    
    stats = conn.execute(query, params).fetchall()
***** APP.PY
        params.extend([search_term, search_term])
    query += ' ORDER BY ss.period DESC, b.name, pc.main_article'
    stats = conn.execute(query, params).fetchall()
*****

***** qw1-app.py
    conn.close()
    
    return jsonify([dict(stat) for stat in stats])
    
@app.route('/api/sales_statistics/upload', methods=['POST'])
***** APP.PY
    conn.close()
    return jsonify([dict(stat) for stat in stats])

@app.route('/api/sales_statistics/upload', methods=['POST'])
*****

***** qw1-app.py
        return jsonify({'error': 'No file selected'}), 400
    data_type = request.form.get('data_type', 'own_sales')
    if file and file.filename.endswith(('.xlsx', '.xls')):
***** APP.PY
        return jsonify({'error': 'No file selected'}), 400

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    data_type = request.form.get('data_type', 'own_sales')
    if data_type not in ['own_sales', 'competitor_sales', 'analytics_center']:
        return jsonify({'error': 'Invalid data_type provided'}), 400

    if file and file.filename.endswith(('.xlsx', '.xls')):
*****

***** qw1-app.py
                col_lower = str(col).lower()
                if '–∞—Ä—Ç–∏–∫—É–ª' in col_lower: 
                    column_mapping[col] = 'article'
                elif '–º–∞—Ä–∫–∞' in col_lower: 
                    column_mapping[col] = 'brand'
                elif '–ø–µ—Ä–∏–æ–¥' in col_lower or '–¥–∞—Ç–∞' in col_lower: 
                    column_mapping[col] = 'period'
                elif '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in col_lower or '–ø—Ä–æ–¥–∞–∂–∏' in col_lower or '—à—Ç' in col_lower: 
                    column_mapping[col] = 'quantity'
                elif '–≥—Ä—É–ø–ø–∞' in col_lower: 
                    column_mapping[col] = 'volume_group'
                elif '–∑–∞–ø—Ä–æ—Å' in col_lower: 
                    column_mapping[col] = 'requests'
                elif '–∏—Å—Ç–æ—á–Ω–∏–∫' in col_lower: 
                    column_mapping[col] = 'source'
                elif '–ø—Ä–∏–º–µ—á' in col_lower: 
                    column_mapping[col] = 'notes'
            df = df.rename(columns=column_mapping)
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if 'article' in df.columns:
                df['article'] = df['article'].apply(normalize_article)
            if 'brand' in df.columns:
                df['brand'] = df['brand'].fillna('').astype(str).str.strip()
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['article', 'brand', 'period']
            missing_fields = [field for field in required_fields if field not in df.columns]
***** APP.PY
                col_lower = str(col).lower()
                if '–∞—Ä—Ç–∏–∫—É–ª' in col_lower:
                    column_mapping[col] = 'article'
                elif '–º–∞—Ä–∫–∞' in col_lower:
                    column_mapping[col] = 'brand'
                elif '–ø–µ—Ä–∏–æ–¥' in col_lower or '–¥–∞—Ç–∞' in col_lower:
                    column_mapping[col] = 'period'
                elif '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in col_lower or '–ø—Ä–æ–¥–∞–∂–∏' in col_lower or '—à—Ç' in col_lower:
                    column_mapping[col] = 'quantity'
                elif '–≥—Ä—É–ø–ø–∞' in col_lower:
                    column_mapping[col] = 'volume_group'
                elif '–∑–∞–ø—Ä–æ—Å' in col_lower:
                    column_mapping[col] = 'requests'
                elif '–∏—Å—Ç–æ—á–Ω–∏–∫' in col_lower:
                    column_mapping[col] = 'source'
                elif '–ø—Ä–∏–º–µ—á' in col_lower:
                    column_mapping[col] = 'notes'

            df = df.rename(columns=column_mapping)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            required_fields = ['article', 'brand'] # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –≤—Å–µ–≥–¥–∞
            if data_type in ['own_sales', 'competitor_sales']:
                required_fields.extend(['quantity', 'period']) # –¢—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∂
            if data_type == 'analytics_center':
                required_fields.extend(['volume_group']) # –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

            missing_fields = [field for field in required_fields if field not in df.columns]
*****

***** qw1-app.py
ields)}'}), 400
            df = df.dropna(subset=['article', 'brand', 'period'])
            conn = get_db_connection()
***** APP.PY
ields)}'}), 400

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if 'article' in df.columns:
                df['article'] = df['article'].apply(normalize_article)
            if 'brand' in df.columns:
                df['brand'] = df['brand'].fillna('').astype(str).str.strip()

            df = df.dropna(subset=required_fields)

            conn = get_db_connection()
*****

***** qw1-app.py
            new_brands = set()
            for _, row in df.iterrows():
***** APP.PY
            new_brands = set()
            new_articles = set()

            for _, row in df.iterrows():
*****

***** qw1-app.py
                notes = row.get('notes', '')
                if not article or not brand_name:
***** APP.PY
                notes = row.get('notes', '')

                if not article or not brand_name:
*****

***** qw1-app.py
                    continue
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –¥–∞—Ç—É
                try:
                    if isinstance(period, str):
                        period_date = datetime.strptime(period, '%Y-%m-%d').date()
                    else:
                        period_date = period.date() if hasattr(period, 'date') else datetime.now().date()
                except:
                    period_date = datetime.now().date()

***** APP.PY
                    continue

*****

***** qw1-app.py
                if not brand_id:
                    # –ï—Å–ª–∏ get_or_create_brand –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                    print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è '{brand_
***** APP.PY
                if not brand_id:
                    print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è '{brand_
*****

***** qw1-app.py

                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä—É–ø–ø—É –æ–±—ä–µ–º–∞
***** APP.PY

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –¥–∞—Ç—É (–≥–æ–¥-–º–µ—Å—è—Ü)
                period_date = None
                if period:
                    try:
                        if isinstance(period, str):
                            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ YYYY-MM –∏–ª–∏ YYYY-MM-DD
                            period_date = datetime.strptime(period, '%Y-%m').date()
                        elif hasattr(period, 'date'):
                            # –ï—Å–ª–∏ —ç—Ç–æ pandas datetime, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                            period_date = period.date().replace(day=1) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–∞ 1 –¥–ª—è –º–µ
—Å—è—Ü–∞
                        else:
                            # –ï—Å–ª–∏ —á–∏—Å–ª–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≥–æ–¥
                            year = int(period)
                            period_date = datetime(year, 1, 1).date()
                    except ValueError:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                        period_date = datetime.now().date().replace(day=1)

                # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º part_id –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ brand_id –∏ article ---
                # –ò—â–µ–º –¥–µ—Ç–∞–ª—å –≤ parts_catalog
                existing_part = conn.execute('''
                    SELECT id FROM parts_catalog
                    WHERE brand_id = ? AND (main_article = ? OR additional_article = ?)
                ''', (brand_id, article, article)).fetchone()

                if existing_part:
                    part_id = existing_part['id']
                else:
                    # –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ parts_catalog
                    cursor = conn.execute(
                        'INSERT INTO parts_catalog (brand_id, main_article) VALUES (?, ?)',
                        (brand_id, article)
                    )
                    part_id = cursor.lastrowid
                    new_articles.add(f"{brand_name}-{article}")
                # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä—É–ø–ø—É –æ–±—ä–µ–º–∞
*****

***** qw1-app.py
                        volume_group_normalized = 'no_demand'
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                existing = conn.execute('''
                    SELECT id FROM sales_statistics 
                    WHERE brand_id = ? AND main_article = ? AND data_type = ? AND period = ?
                ''', (brand_id, article, data_type, period_date)).fetchone()
                if existing:
***** APP.PY
                        volume_group_normalized = 'no_demand'

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ part_id, data_type –∏ period
                existing = conn.execute('''
                    SELECT id FROM sales_statistics
                    WHERE part_id = ? AND data_type = ? AND period = ?
                ''', (part_id, data_type, period_date)).fetchone()


                if existing:
*****

***** qw1-app.py
                    conn.execute('''
                        UPDATE sales_statistics 
                        SET quantity = ?, volume_group = ?, requests_per_month = ?, source_name = ?, notes = ?, updated_at = CU
***** APP.PY
                    conn.execute('''
                        UPDATE sales_statistics
                        SET quantity = ?, volume_group = ?, requests_per_month = ?, source_name = ?, notes = ?, updated_at = CU
*****

***** qw1-app.py
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    conn.execute('''
                        INSERT INTO sales_statistics 
                        (brand_id, main_article, data_type, period, quantity, volume_group, requests_per_month, source_name, no
tes)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (brand_id, article, data_type, period_date, quantity, volume_group_normalized, requests, source, notes
))
                    added_count += 1
            conn.commit()
***** APP.PY
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å part_id
                    conn.execute('''
                        INSERT INTO sales_statistics
                        (part_id, data_type, period, quantity, volume_group, requests_per_month, source_name, notes)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (part_id, data_type, period_date, quantity, volume_group_normalized, requests, source, notes))
                    added_count += 1

            conn.commit()
*****

***** qw1-app.py
            conn.close()
            return jsonify({
***** APP.PY
            conn.close()

            return jsonify({
*****

***** qw1-app.py
                'total': len(df),
                'new_brands': list(new_brands)
            })
        except Exception as e:
***** APP.PY
                'total': len(df),
                'new_brands': list(new_brands),
                'new_articles': list(new_articles) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
            })

        except Exception as e:
*****

***** qw1-app.py
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'}), 500
    return jsonify({'error': 'Invalid file format'}), 400    


***** APP.PY
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'}), 500

    return jsonify({'error': 'Invalid file format'}), 400

*****

***** qw1-app.py
    conn = get_db_connection()
    
    if request.method == 'PUT':
***** APP.PY
    conn = get_db_connection()
    if request.method == 'PUT':
*****

***** qw1-app.py
        data = request.get_json()
        
        # –ù–∞—Ö–æ–¥–∏–º ID –±—Ä–µ–Ω–¥–∞ –ø–æ –∏–º–µ–Ω–∏
        brand = conn.execute(
***** APP.PY
        data = request.get_json()
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º part_id –ø–æ brand –∏ article ---
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º brand_id
        brand = conn.execute(
*****

***** qw1-app.py
        ).fetchone()
        
        if not brand:
***** APP.PY
        ).fetchone()
        if not brand:
*****

***** qw1-app.py
            return jsonify({'error': '–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
***** APP.PY
            return jsonify({'error': '–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        brand_id = brand['id']

        # –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º part_id –≤ parts_catalog
        article = data.get('main_article', '')
        part = conn.execute(
            'SELECT id FROM parts_catalog WHERE brand_id = ? AND (main_article = ? OR additional_article = ?)',
            (brand_id, article, article)
        ).fetchone()
        if not part:
            conn.close()
            return jsonify({'error': '–î–µ—Ç–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ'}), 400
        part_id = part['id']
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
*****

***** qw1-app.py
        conn.execute('''
            UPDATE sales_statistics 
            SET brand_id = ?, main_article = ?, data_type = ?, period = ?, 
                quantity = ?, volume_group = ?, requests_per_month = ?, 
                source_name = ?, notes = ?, updated_at = CURRENT_TIMESTAMP
***** APP.PY
        conn.execute('''
            UPDATE sales_statistics
            SET part_id = ?, data_type = ?, period = ?,
                quantity = ?, volume_group = ?, requests_per_month = ?,
                source_name = ?, notes = ?, updated_at = CURRENT_TIMESTAMP
*****

***** qw1-app.py
        ''', (
            brand['id'],
            data.get('main_article', ''),
            data.get('data_type', 'own_sales'),
***** APP.PY
        ''', (
            part_id, # <-- –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º part_id
            data.get('data_type', 'own_sales'),
*****

***** qw1-app.py
        ))
        
        conn.commit()
***** APP.PY
        ))
        conn.commit()
*****

***** qw1-app.py
        return jsonify({'success': True})
    
    elif request.method == 'DELETE':
***** APP.PY
        return jsonify({'success': True})

    elif request.method == 'DELETE':
*****

***** qw1-app.py

@app.route('/api/sales_statistics/aggregated')
def api_sales_statistics_aggregated():
    """API –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–µ—Ç–∞–ª—è–º"""
    conn = get_db_connection()
***** APP.PY

# ================== /–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ ==================

    
# ================== –ö–ê–¢–ê–õ–û–ì ==================
@app.route('/catalog')
def catalog_management():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–º"""
    conn = get_db_connection()
*****

***** qw1-app.py
    
    query = '''
    WITH LatestStats AS (
        SELECT 
            ss.brand_id,
            ss.main_article,
            ss.data_type,
            ss.quantity,
            ss.volume_group,
            ss.requests_per_month,
            ss.period,
            ROW_NUMBER() OVER (PARTITION BY ss.brand_id, ss.main_article, ss.data_type ORDER BY ss.period DESC) as rn
        FROM sales_statistics ss
    )
    SELECT 
        b.name as brand_name,
        ls.main_article,
        ls.data_type,
        ls.quantity,
        ls.volume_group,
        ls.requests_per_month,
        ls.period
    FROM LatestStats ls
    JOIN brands b ON ls.brand_id = b.id
    WHERE ls.rn = 1
    ORDER BY b.name, ls.main_article, ls.data_type
    '''
    
    stats = conn.execute(query).fetchall()
    conn.close()
    
    return jsonify([dict(stat) for stat in stats])

    
# ================== –ö–ê–¢–ê–õ–û–ì ==================
@app.route('/catalog')
def catalog_management():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–º"""
    conn = get_db_connection()
***** APP.PY
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    brands = conn.execute(
        'SELECT * FROM brands ORDER BY name'
    ).fetchall()
    
    conn.close()
    return render_template('catalog.html', brands=brands)

@app.route('/api/catalog')
def api_catalog():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 50, type=int)
    brand_filter = request.args.get('brand', '')
    article_filter = request.args.get('article', '')
    
    conn = get_db_connection()
*****

***** qw1-app.py
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    brands = conn.execute(
        'SELECT * FROM brands ORDER BY name'
    ).fetchall()
    
    conn.close()
    return render_template('catalog.html', brands=brands)

@app.route('/api/catalog')
def api_catalog():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 50, type=int)
    brand_filter = request.args.get('brand', '')
    article_filter = request.args.get('article', '')
    
    conn = get_db_connection()
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
***** APP.PY
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
*****

